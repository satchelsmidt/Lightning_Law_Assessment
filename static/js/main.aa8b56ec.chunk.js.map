{"version":3,"sources":["components/CountryDropdown.js","components/TotalReviewsBox.js","components/ReviewTable.js","App.js","api/getWine.js","serviceWorker.js","index.js"],"names":["CountryDropdown","countryData","changeSelectedCountry","currentCountry","options","onChange","e","value","handleCountryChange","placeholder","TotalReviewsBox","selectedCountryReviews","length","ReviewsTable","offset","perPage","handlePageClick","pageCount","slicedReviews","slice","map","review","key","title","style","styles","tableRow","variety","winery","points","price","designation","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","nextPageClick","containerClassName","subContainerClassName","activeClassName","App","useState","reviewData","setReviewData","countries","setCountries","selectedCountry","setSelectedCountry","setSelectedCountryReviews","searchTerm","setSearchTerm","loading","setLoading","setOffset","setPerPage","setPageCount","filterReviews","countryReviews","filter","country","Math","ceil","useEffect","axios","get","then","res","success","message","data","catch","console","log","i","push","uniqueCountries","Set","add","uniqueCountriesArray","Array","from","color","className","mainContainer","topContainer","innerContainer","bottomContainer","type","target","onClick","searchedReviews","handleSearch","parseInt","handleCountChange","selectedPage","selected","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.aa8b56ec.chunk.js","sourcesContent":["import React from 'react'\nimport Dropdown from 'react-dropdown'\n\nexport default function CountryDropdown({ countryData, changeSelectedCountry, currentCountry }) {\n\n    const handleCountryChange = (e) => {\n        changeSelectedCountry(e.value)\n    }\n\n    return (\n        <div>\n            <Dropdown options={countryData} onChange={(e) => handleCountryChange(e)} value={currentCountry} placeholder={currentCountry === '' ? \"Select Country from Dropdown\" : currentCountry} />\n        </div>\n    )\n}","import React from 'react'\n\nexport default function TotalReviewsBox({ selectedCountryReviews }) {\n    return (\n        <div>\n            <p>Total Reviews: {selectedCountryReviews.length}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\n\nexport default function ReviewsTable({ selectedCountryReviews, offset, perPage, handlePageClick, pageCount }) {\n\n    const slicedReviews = selectedCountryReviews.slice(offset, (offset + perPage))\n\n    const nextPageClick = (e) => {\n        handlePageClick(e)\n    }\n\n    const renderTableData = () => {\n        return slicedReviews.map((review) => {\n            return <tr key={review.title} style={styles.tableRow}>\n                <td>{review.title ? review.title : 'N/A'}</td>\n                <td>{review.variety ? review.variety : 'N/A'}</td>\n                <td>{review.winery ? review.winery : 'N/A'}</td>\n                <td>{review.points ? review.points : 'N/A'}</td>\n                <td>{review.price ? review.price : 'N/A'}</td>\n                <td>{review.designation ? review.designation : 'N/A'}</td>\n            </tr>\n        })\n    }\n\n    return (\n        <div>\n            <div>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>Title</th>\n                            <th>Variety</th>\n                            <th>Winery</th>\n                            <th>Points</th>\n                            <th>Price</th>\n                            <th>Description</th>\n                        </tr>\n                        {renderTableData()}\n                    </tbody>\n                </table>\n            </div>\n            <ReactPaginate\n                previousLabel={\"prev\"}\n                nextLabel={\"next\"}\n                breakLabel={\"...\"}\n                breakClassName={\"break-me\"}\n                pageCount={pageCount}\n                marginPagesDisplayed={2}\n                pageRangeDisplayed={5}\n                onPageChange={(e) => nextPageClick(e)}\n                containerClassName={\"pagination\"}\n                subContainerClassName={\"pages pagination\"}\n                activeClassName={\"active\"} />\n        </div>\n    )\n}\n\nconst styles = {\n    tableRow: {\n        'margin': '10px'\n    }\n}","import React, { useState, useEffect } from 'react';\nimport { getWine } from './api/getWine'\nimport { BallBeat } from 'react-pure-loaders';\nimport ReviewData from './ReviewData.json'\nimport CountryDropdown from './components/CountryDropdown'\nimport TotalReviewsBox from './components/TotalReviewsBox'\nimport ReviewTable from './components/ReviewTable'\nimport Dropdown from 'react-dropdown'\n\n\nexport default function App() {\n\n  const [reviewData, setReviewData] = useState([])\n  const [countries, setCountries] = useState([])\n  const [selectedCountry, setSelectedCountry] = useState('')\n  const [selectedCountryReviews, setSelectedCountryReviews] = useState([])\n  const [searchTerm, setSearchTerm] = useState('')\n\n  const [loading, setLoading] = useState(true)\n\n  // //pagination data\n  const [offset, setOffset] = useState(0)\n  const [perPage, setPerPage] = useState(10)\n  const [pageCount, setPageCount] = useState(null)\n\n\n  //TODO: make this functional\n  // const getInitialState = () => {\n  //   setReviewData(localStorage.getItem('ReviewData') || [])\n  //   // setCountries(localStorage.getItem('Countries') || [])\n  //   setSelectedCountry(localStorage.getItem('SelectedCountry') || '')\n  //   setSelectedCountryReviews(localStorage.getItem('SelectedCountryReviews') || [])\n\n  //   setOffset(localStorage.getItem('Offset') || 0)\n  //   setPerPage(localStorage.getItem('PerPage') || 10)\n  //   setPageCount(localStorage.getItem('PageCount') || null)\n  // }\n\n\n  //Function that runs when country selected from dropdown\n  const changeSelectedCountry = (country) => {\n    setSelectedCountry(country)\n    // localStorage.setItem('SelectedCountry', country);\n  }\n\n\n  //Function that runs to filter reviews by selected country\n  const filterReviews = () => {\n    let countryReviews = reviewData.filter((review) => {\n      return review.country === selectedCountry\n    })\n\n    setPageCount(Math.ceil(countryReviews.length / perPage))\n    // localStorage.setItem('PageCount', countryReviews.length / perPage);\n\n    setSelectedCountryReviews(countryReviews)\n    // localStorage.setItem('SelectedCountryReviews', countryReviews);\n  }\n\n\n  //handle a click of the page\n  const handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    const offset = selectedPage * perPage;\n\n    setOffset(offset)\n    // localStorage.setItem('Offset', offset);\n  };\n\n\n  //handle search term\n  const handleSearch = () => {\n\n    let searchedReviews = selectedCountryReviews.filter((review) => {\n      return (\n        review.title === searchTerm ||\n        review.variety === searchTerm ||\n        review.winery === searchTerm ||\n        review.designation === searchTerm\n      )\n    })\n\n    setPageCount(Math.ceil(searchedReviews.length / perPage))\n    setSelectedCountryReviews(searchedReviews)\n  }\n\n\n  //handle clear search term\n  const handleClear = () => {\n\n    setSearchTerm('')\n    filterReviews()\n  }\n\n  const handleCountChange = (e) => {\n    console.log('this is e: ', e)\n    setPerPage(parseInt(e.value))\n  }\n\n\n  // Effect hook runs once on page load, grabs data\n  useEffect(() => {\n    getWine().then((res) => {\n      console.log('the response: ', res)\n      let data = []\n      for (let i of res.data) {\n        data.push(i)\n      }\n\n      setReviewData(data)\n      setLoading(false)\n    })\n  }, [])\n\n\n\n  //NOTE: This is only in place to grab data from local json file, not used in production or if api link is running smoothly\n\n  //hook to grab review data initially\n  // useEffect(() => {\n  //   // if (localStorage.getItem('ReviewData') !== null) {\n  //   //   console.log('country: ', setSelectedCountry(localStorage.getItem('SelectedCountry') || '')\n  //   //   )\n  //   //   getInitialState()\n  //   //   setLoading(false)\n  //   // }\n  //   // else {\n  //   setReviewData(ReviewData)\n  //   // localStorage.setItem('ReviewData', ReviewData);\n  //   setLoading(false)\n  //   // }\n  // }, [])\n  //\n\n\n\n  //hook to parse out countries (runs when review data is fetched)\n  useEffect(() => {\n    let uniqueCountries = new Set()\n    for (let review of reviewData) {\n      if (review.country !== null) {\n        uniqueCountries.add(review.country)\n      }\n    }\n\n    let uniqueCountriesArray = Array.from(uniqueCountries)\n\n    setCountries(uniqueCountriesArray)\n    // localStorage.setItem('Countries', uniqueCountriesArray);\n  }, [reviewData])\n\n\n  //hook to run when we change our selected country\n  useEffect(() => {\n    filterReviews()\n\n  }, [selectedCountry])\n\n\n  //Component to render when data is being fetched\n  if (loading === true) {\n    return <div>\n      <h1>Fetching Wine Reviews</h1>\n      <BallBeat\n        color={'#123abc'}\n        loading={loading}\n      />\n    </div>\n  }\n\n  //Component to render when data is done fetching\n  return (\n    <div className=\"App\" style={styles.mainContainer}>\n\n      <div className=\"TopContainer\" style={styles.topContainer}>\n        <div className=\"innerContainer\" style={styles.innerContainer}>\n          <TotalReviewsBox selectedCountryReviews={selectedCountryReviews}></TotalReviewsBox>\n        </div>\n        <div className=\"innerContainer\" style={styles.innerContainer}>\n          <CountryDropdown countryData={countries} changeSelectedCountry={(country) => changeSelectedCountry(country)} currentCountry={selectedCountry}></CountryDropdown>\n        </div>\n      </div>\n\n      <br></br>\n\n      <div className=\"Bottom Container\" style={styles.bottomContainer}>\n        <div className=\"TopContainer\" style={styles.topContainer}>\n\n          <div className=\"innerContainer\" style={styles.innerContainer}>\n            {selectedCountryReviews.length > 0 && <input type=\"text\" value={searchTerm} placeholder={'Search for Reviews'} onChange={(e) => setSearchTerm(e.target.value)}></input>}\n          </div>\n\n          <div className=\"innerContainer\" style={styles.innerContainer}>\n            {selectedCountryReviews.length > 0 && <button onClick={() => handleSearch()}>Search</button>}\n          </div>\n\n          <div className=\"innerContainer\" style={styles.innerContainer}>\n            {searchTerm && <button onClick={() => handleClear()}>Clear Filter</button>}\n          </div>\n\n          <div className=\"innerContainer\" style={styles.innerContainer}>\n            {selectedCountryReviews.length > 0 && <p>Reviews per Page (style not applying correctly, but works): </p>}\n            {selectedCountryReviews.length > 0 && <div>\n              <Dropdown options={['10', '20', '30', '50', '100']} onChange={(e) => handleCountChange(e)} value={perPage} placeholder='Reviews per Page' /></div>}\n          </div>\n\n        </div>\n        <br></br>\n        {selectedCountryReviews.length > 0 && <ReviewTable selectedCountryReviews={selectedCountryReviews} handlePageClick={(e) => handlePageClick(e)} offset={offset} perPage={perPage} pageCount={pageCount}></ReviewTable>}\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  mainContainer: {\n    'display': 'flex',\n    'flexDirection': 'column',\n    'alignItems': 'center',\n    'justifyContent': 'center',\n  },\n  topContainer: {\n    'display': 'flex',\n    'flexDirection': 'row',\n    'alignItems': 'center',\n    'justifyContent': 'center',\n  },\n  bottomContainer: {\n    'display': 'flex',\n    'flexDirection': 'column',\n    'alignItems': 'center',\n    'justifyContent': 'center',\n  },\n  innerContainer: {\n    'margin': '30px'\n  }\n}","import axios from 'axios';\n\n//create function to grab wine\nexport function getWine() {\n    return axios.get(\"https://lightninglaw.azurewebsites.net/api/reviews\").then((res) => ({ success: true, message: 'Data Retrieved Successfully', data: res.data })).catch((res) => ({ success: false, message: null, data: res }));\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}